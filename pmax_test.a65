; ------------------------------------------------------------
; Mad Pascal Compiler version 1.6.6 [2022/04/28] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $2000

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $80

zpage

.ifdef @vbxe_detect
fxptr	.ds 2						; VBXE pointer
.fi

.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
psptr	.ds 2						; PROGRAMSTACK Pointer
.fi

bp	.ds 2
bp2	.ds 2

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.BASICOFF
	org CODEORIGIN
	icl 'atari\basicoff.asm'
	ini CODEORIGIN
	.fi

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.fi

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_a8.asm'

.print 'ZPAGE: ',zpage,'..',zpend-1

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef fmulinit
	fmulinit
	.fi

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN>0) && (VLEN<=256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>256
	@fill #VADR #VLEN #$00
	eif

.ifdef :psptr
	mwa #PROGRAMSTACK :psptr
.fi

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.fi

	ldx #$0F					; DOS II+/D ParamStr
	mva:rpl $340,x MAIN.IOCB@COPY,x-

	inx						; X = 0
	stx bp						; BP = 0

	stx skctl					; reset POKEY
	lda #3
	sta skctl

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_0063

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

; ------------------------------------------------------------

__PORTB_BANKS	= $0101
M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBTMP	= $E0
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_CHBASE	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
IVBLD	= $01
IVBLI	= $02
ITIM1	= $03
ITIM2	= $04
ITIM4	= $05
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
PAL_PMCOLOR0	= $00
PAL_PMCOLOR1	= $01
PAL_PMCOLOR2	= $02
PAL_PMCOLOR3	= $03
PAL_COLOR0	= $04
PAL_COLOR1	= $05
PAL_COLOR2	= $06
PAL_COLOR3	= $07
PAL_COLBAK	= $08
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
RND	= $D20A
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	ATARI						; UNIT

; ------------------------------------------------------------

IRQENS	= $10
RTCLOK	= $12
RTCLOK1	= $12
RTCLOK2	= $13
RTCLOK3	= $14
ATRACT	= $4D
LMARGIN	= $52
RMARGIN	= $53
ROWCRS	= $54
COLCRS	= $55
DINDEX	= $57
SAVMSC	= $58
PALNTS	= $62
RAMTOP	= $6A
VDSLST	= $0200
SDLSTL	= $0230
TXTROW	= $0290
TXTCOL	= $0291
TINDEX	= $0293
TXTMSC	= $0294
SDMCTL	= $022F
GPRIOR	= $026F
CRSINH	= $02F0
CHACT	= $02F3
CHBAS	= $02F4
CH	= $02FC
FILDAT	= $02FD
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
COLOR0	= $02C4
COLOR1	= $02C5
COLOR2	= $02C6
COLOR3	= $02C7
COLOR4	= $02C8
COLBAKS	= $02C8
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
HPOSP3	= $D003
HPOSM0	= $D004
HPOSM1	= $D005
HPOSM2	= $D006
HPOSM3	= $D007
SIZEP0	= $D008
SIZEP1	= $D009
SIZEP2	= $D00A
SIZEP3	= $D00B
SIZEM	= $D00C
GRAFP0	= $D00D
GRAFP1	= $D00E
GRAFP2	= $D00F
GRAFP3	= $D010
GRAFM	= $D011
P0PF	= $D004
PAL	= $D014
TRIG3	= $D013
COLPM0	= $D012
COLPM1	= $D013
COLPM2	= $D014
COLPM3	= $D015
COLPF0	= $D016
COLPF1	= $D017
COLPF2	= $D018
COLPF3	= $D019
COLBK	= $D01A
PRIOR	= $D01B
GRACTL	= $D01D
HITCLR	= $D01E
CONSOL	= $D01F
AUDF1	= $D200
AUDC1	= $D201
AUDF2	= $D202
AUDC2	= $D203
AUDF3	= $D204
AUDC3	= $D205
AUDF4	= $D206
AUDC4	= $D207
AUDCTL	= $D208
KBCODE	= $D209
IRQEN	= $D20E
SKSTAT	= $D20F
PORTA	= $D300
PORTB	= $D301
PACTL	= $D302
DMACTL	= $D400
CHACTL	= $D401
DLISTL	= $D402
HSCROL	= $D404
VSCROL	= $D405
PMBASE	= $D407
CHBASE	= $D409
WSYNC	= $D40A
VCOUNT	= $D40B
PENH	= $D40C
PENV	= $D40D
NMIEN	= $D40E
NMIVEC	= $FFFA
RESETVEC	= $FFFC
IRQVEC	= $FFFE

.endl							; UNIT ATARI

; ------------------------------------------------------------

.local	CRT						; UNIT

.local	KEYPRESSED					; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000055  -------------------

	ldy #$00	; false
	lda kbcodes
	cmp #$ff
	seq
	iny		; true
	sty Result

@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$000C
	rts						; ret
.endl

; ------------------------------------------------------------

TEXTATTR	= DATAORIGIN+$000B
CONSOL	= $D01F
CN_START_SELECT_OPTION	= $00
CN_SELECT_OPTION	= $01
CN_START_OPTION	= $02
CN_OPTION	= $03
CN_START_SELECT	= $04
CN_SELECT	= $05
CN_START	= $06
CN_NONE	= $07
BW40	= $00
CO40	= $01
BW80	= $02
CO80	= $03
MONO	= $07
C40	= $01
C80	= $03
BLACK	= $00
WHITE	= $0F
RED	= $26
CYAN	= $AC
PURPLE	= $48
GREEN	= $B6
BLUE	= $86
YELLOW	= $DC
ORANGE	= $18
BROWN	= $F4
LIGHT_RED	= $2A
DARK_GREY	= $04
GREY	= $08
LIGHT_GREEN	= $BC
LIGHT_BLUE	= $9A
LIGHT_GREY	= $0C
BLINK	= $80

.endl							; UNIT CRT

; ------------------------------------------------------------

.local	PM_DETECT					; UNIT

.local	PMAX_DETECT					; FUNCTION

; optimize OK (PM_DETECT), line = 122

	mwy POKEY :bp2
	ldy #$0C
	lda (:bp2),y
	cmp #$01
	jeq l_00F5

; optimize OK (PM_DETECT), line = 124

	lda #$00
	sta RESULT
	jmp l_0103
l_00F5

; optimize OK (PM_DETECT), line = 125

	lda #$01
	sta RESULT
l_0103
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$000D
	rts						; ret
.endl

.local	PMAX_ISFLASHPRESENT				; FUNCTION

; optimize OK (PM_DETECT), line = 130

	mwy CONFIG :bp2
	ldy #$01
	lda (:bp2),y
	and #$40
	cmp #$40
	jne l_0122

; optimize OK (PM_DETECT), line = 132

	lda #$01
	sta RESULT
	jmp l_0130
l_0122

; optimize OK (PM_DETECT), line = 133

	lda #$00
	sta RESULT
l_0130
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$000E
	rts						; ret
.endl

.local	PMAX_ISSIDPRESENT				; FUNCTION

; optimize OK (PM_DETECT), line = 139

	mwy CONFIG :bp2
	ldy #$01
	lda (:bp2),y
	and #$04
	cmp #$04
	jne l_014F

; optimize OK (PM_DETECT), line = 141

	lda #$01
	sta RESULT
	jmp l_015D
l_014F

; optimize OK (PM_DETECT), line = 142

	lda #$00
	sta RESULT
l_015D
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$000F
	rts						; ret
.endl

.local	PMAX_ISPSGPRESENT				; FUNCTION

; optimize OK (PM_DETECT), line = 148

	mwy CONFIG :bp2
	ldy #$01
	lda (:bp2),y
	and #$08
	cmp #$08
	jne l_017C

; optimize OK (PM_DETECT), line = 150

	lda #$01
	sta RESULT
	jmp l_018A
l_017C

; optimize OK (PM_DETECT), line = 151

	lda #$00
	sta RESULT
l_018A
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0010
	rts						; ret
.endl

.local	PMAX_ISCOVOXPRESENT				; FUNCTION

; optimize OK (PM_DETECT), line = 157

	mwy CONFIG :bp2
	ldy #$01
	lda (:bp2),y
	and #$10
	cmp #$10
	jne l_01A9

; optimize OK (PM_DETECT), line = 159

	lda #$01
	sta RESULT
	jmp l_01B7
l_01A9

; optimize OK (PM_DETECT), line = 160

	lda #$00
	sta RESULT
l_01B7
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0011
	rts						; ret
.endl

.local	PMAX_ISSAMPLEPRESENT				; FUNCTION

; optimize OK (PM_DETECT), line = 166

	mwy CONFIG :bp2
	ldy #$01
	lda (:bp2),y
	and #$20
	cmp #$20
	jne l_01D6

; optimize OK (PM_DETECT), line = 168

	lda #$01
	sta RESULT
	jmp l_01E4
l_01D6

; optimize OK (PM_DETECT), line = 169

	lda #$00
	sta RESULT
l_01E4
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0012
	rts						; ret
.endl

.local	PMAX_GETPOKEY					; FUNCTION

; optimize OK (PM_DETECT), line = 174

	mwy CONFIG :bp2
	ldy #$01
	lda (:bp2),y
	and #$03
	sta @CASETMP_0003
	cmp #$00
	jne l_01FC
@

; optimize OK (PM_DETECT), line = 175

	lda #$01
	sta RESULT

	jmp a_0003
l_01FC
	cmp #$01
	jne l_0209
@

; optimize OK (PM_DETECT), line = 176

	lda #$02
	sta RESULT

	jmp a_0003
l_0209
	cmp #$02
	jne l_0216
@

; optimize OK (PM_DETECT), line = 177

	lda #$04
	sta RESULT

	jmp a_0003
l_0216
	cmp #$03
	jne l_0223
@

; optimize OK (PM_DETECT), line = 178

	lda #$04
	sta RESULT

l_0223
a_0003
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0013
@CASETMP_0003	= DATAORIGIN+$0014

@VarData	= @CASETMP_0003
@VarDataSize	= 1

	rts						; ret
.endl

.local	PMAX_GETCOREVERSION				; FUNCTION

; optimize OK (PM_DETECT), line = 196

	lda #$08
	sta adr.S+$00

; optimize OK (PM_DETECT), line = 197

	lda #$00
	sta I

l_0241
; --- ForToDoCondition
	lda I
	cmp #$08
	jcs l_024F

; optimize OK (PM_DETECT), line = 199

	sta CORE

; optimize OK (PM_DETECT), line = 200

	lda #$01
	add I
	sta :STACKORIGIN+9
	ldy +:STACKORIGIN+9
	lda CORE
	sta adr.S,y

; --- ForToDoEpilog
	inc I
	jne l_0241
l_024F

; optimize OK (PM_DETECT), line = 202

	lda S
	sta @move.src
	lda S+1
	sta @move.src+1
	mwy RESULT :bp2
	ldy #$00
	mva:rne (@move.src),y (:bp2),y+
@exit

; ------------------------------------------------------------

adr.RESULT	= [DATAORIGIN+$0015] .array [256]
.var RESULT	= adr.RESULT .word
I	= DATAORIGIN+$0115
adr.S	= [DATAORIGIN+$0116] .array [256]
.var S	= adr.S .word

@VarData	= RESULT
@VarDataSize	= 513

	rts						; ret
.endl

.local	PMAX_ENABLECONFIG				; PROCEDURE
	sta ENABLED

; optimize OK (PM_DETECT), line = 207

	jeq l_0279
	mwy POKEY :bp2
	ldy #$0C
	lda #$3F
	sta (:bp2),y
	jmp l_0288
l_0279

; optimize OK (PM_DETECT), line = 208

	mwy POKEY :bp2
	ldy #$0C
	lda #$00
	sta (:bp2),y
l_0288

; ------------------------------------------------------------

ENABLED	= DATAORIGIN+$0216

@VarData	= ENABLED
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

adr.POKEY	= $D200
.var POKEY	= adr.POKEY .word
adr.CONFIG	= $D210
.var CONFIG	= adr.CONFIG .word
CORE	= $D214
CORE_MONO	= $01
CORE_DIVIDE	= $02
CORE_GTIA	= $03
CORE_RESTRICT	= $04
CORE_OUTPUT	= $05
CORE_PHI	= $06
CORE_MAX	= $06
POKEY_LINEAR	= $01
POKEY_CHANNEL_MODE	= $02
POKEY_IRQ	= $03
POKEY_MAX	= $03
PSG_FREQUENCY	= $01
PSG_STEREO	= $02
PSG_ENVELOPE	= $03
PSG_VOLUME	= $04
PSG_MAX	= $04
SID_TYPE	= $01
SID_MAX	= $01
POKEY_DETECT	= $0C
CONFIG_TYPE	= $01
CONFIG_VERSION	= $04

.endl							; UNIT PM_DETECT

.local	CONVERT_BOOL					; FUNCTION
	sta VALUE

; optimize OK (pmax_test.pas), line = 11

	jeq l_029D
	ldy #256-4
	mva:rne CODEORIGIN+$0000+4-256,y adr.RESULT+4-256,y+
	jmp l_02A7
l_029D
	ldy #256-3
	mva:rne CODEORIGIN+$0005+3-256,y adr.RESULT+3-256,y+
l_02A7
@exit

; ------------------------------------------------------------

VALUE	= DATAORIGIN+$0218
adr.RESULT	= [DATAORIGIN+$0219] .array [256]
.var RESULT	= adr.RESULT .word

@VarData	= VALUE
@VarDataSize	= 257

	rts						; ret
.endl
l_0063

; optimize FAIL ('PM_DETECT.PMAX_DETECT', pmax_test.pas), line = 16

	jsr PM_DETECT.PMAX_DETECT
	lda PM_DETECT.PMAX_DETECT.RESULT
	sta PRESENT

; optimize OK (pmax_test.pas), line = 17

	jeq l_02B8

; optimize OK (pmax_test.pas), line = 19

	lda #$01
	jsr PM_DETECT.PMAX_ENABLECONFIG

; optimize FAIL ('@print', pmax_test.pas), line = 26

	@printSTRING #CODEORIGIN+$0009
	jsr PM_DETECT.PMAX_GETCOREVERSION
	@printSTRING PM_DETECT.PMAX_GETCOREVERSION.RESULT
	@printEOL

; optimize FAIL ('@print', pmax_test.pas), line = 27

	@printSTRING #CODEORIGIN+$0011
	jsr PM_DETECT.PMAX_GETPOKEY
	lda PM_DETECT.PMAX_GETPOKEY.RESULT
	jsr @printBYTE._a
	@printEOL

; optimize FAIL ('@print', pmax_test.pas), line = 29

	@printSTRING #CODEORIGIN+$001B
	jsr PM_DETECT.PMAX_ISSIDPRESENT
	lda PM_DETECT.PMAX_ISSIDPRESENT.RESULT
	jsr CONVERT_BOOL
	@printSTRING CONVERT_BOOL.RESULT
	@printEOL

; optimize FAIL ('@print', pmax_test.pas), line = 30

	@printSTRING #CODEORIGIN+$0022
	jsr PM_DETECT.PMAX_ISPSGPRESENT
	lda PM_DETECT.PMAX_ISPSGPRESENT.RESULT
	jsr CONVERT_BOOL
	@printSTRING CONVERT_BOOL.RESULT
	@printEOL

; optimize FAIL ('@print', pmax_test.pas), line = 31

	@printSTRING #CODEORIGIN+$0029
	jsr PM_DETECT.PMAX_ISCOVOXPRESENT
	lda PM_DETECT.PMAX_ISCOVOXPRESENT.RESULT
	jsr CONVERT_BOOL
	@printSTRING CONVERT_BOOL.RESULT
	@printEOL

; optimize FAIL ('@print', pmax_test.pas), line = 32

	@printSTRING #CODEORIGIN+$0032
	jsr PM_DETECT.PMAX_ISSAMPLEPRESENT
	lda PM_DETECT.PMAX_ISSAMPLEPRESENT.RESULT
	jsr CONVERT_BOOL
	@printSTRING CONVERT_BOOL.RESULT
	@printEOL

; optimize FAIL ('@print', pmax_test.pas), line = 33

	@printSTRING #CODEORIGIN+$003C
	jsr PM_DETECT.PMAX_ISFLASHPRESENT
	lda PM_DETECT.PMAX_ISFLASHPRESENT.RESULT
	jsr CONVERT_BOOL
	@printSTRING CONVERT_BOOL.RESULT
	@printEOL

; optimize OK (pmax_test.pas), line = 34

	lda #$00
	jsr PM_DETECT.PMAX_ENABLECONFIG
	jmp l_0304
l_02B8

; optimize FAIL ('@print', pmax_test.pas), line = 37

	@printSTRING #CODEORIGIN+$0045
	@printEOL
l_0304

; --- RepeatUntilProlog
l_0308

; optimize FAIL ('CRT.KEYPRESSED', pmax_test.pas), line = 39

	jsr CRT.KEYPRESSED
	lda CRT.KEYPRESSED.RESULT
	jeq l_0308

; ------------------------------------------------------------

PRESENT	= DATAORIGIN+$0217
@exit

@halt	ldx #$00
	txs
	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.fi

	ldy #$01

	rts

; ------------------------------------------------------------

IOCB@COPY	:16 brk

; ------------------------------------------------------------

.local	@DEFINES
ATARI
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	.fi

	.ifdef MAIN.ATARI.@UnitInit
	jsr MAIN.ATARI.@UnitInit
	.fi

	.ifdef MAIN.CRT.@UnitInit
	jsr MAIN.CRT.@UnitInit
	.fi

	.ifdef MAIN.PM_DETECT.@UnitInit
	jsr MAIN.PM_DETECT.@UnitInit
	.fi
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.ATARI) > 0
	.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
	eif

	ift .SIZEOF(MAIN.CRT) > 0
	.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
	eif

	ift .SIZEOF(MAIN.PM_DETECT) > 0
	.print 'PM_DETECT: ',MAIN.PM_DETECT,'..',MAIN.PM_DETECT+.SIZEOF(MAIN.PM_DETECT)-1
	eif

	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

; ------------------------------------------------------------

	.align $0004

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 793

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.by  $03 $59 $65 $73 $00 $02 $4E $6F  $00 $06 $43 $6F $72 $65 $3A $20  $00 $08 $50 $6F $6B $65 $79 $73
.by  $3A $20 $00 $05 $53 $49 $44 $3A  $20 $00 $05 $50 $53 $47 $3A $20  $00 $07 $43 $6F $76 $6F $78 $3A
.by  $20 $00 $08 $53 $61 $6D $70 $6C  $65 $3A $20 $00 $07 $46 $6C $61  $73 $68 $3A $20 $00 $15 $20 $50
.by  $6F $6B $65 $79 $4D $41 $58 $20  $6E $6F $74 $20 $66 $6F $75 $6E  $64 $2E $20 $00
.endm

	end
